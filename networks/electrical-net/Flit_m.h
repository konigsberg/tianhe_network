//
// Generated file, do not edit! Created by nedtool 5.1 from Flit.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __FLIT_M_H
#define __FLIT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Flit.msg:8</tt> by nedtool.
 * <pre>
 * packet Flit
 * {
 *     int flitCount; // how many flit in this packet
 *     int srcId;
 *     int destId;
 *     bool isHead;
 *     bool isTail;
 *     // If in link, vcid is the next router input vcid;
 *     // If in router and before RC, vcid is the current router input vcid;
 *     // If in router and after RC, vcid is the output vcid,
 *     // say, input vcid of next hop router.
 *     int vcid;
 * 
 *     // If in link, port is the next router input port;
 *     // If in router and before RC, vcid is the current router input port;
 *     // If in router and after RC, vcid is the output port,
 *     // say, input port of next hop router.
 *     int port;
 *     int hopCount;
 *     double sendTime;
 * }
 * </pre>
 */
class Flit : public ::omnetpp::cPacket
{
  protected:
    int flitCount;
    int srcId;
    int destId;
    bool isHead;
    bool isTail;
    int vcid;
    int port;
    int hopCount;
    double sendTime;

  private:
    void copy(const Flit& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Flit&);

  public:
    Flit(const char *name=nullptr, short kind=0);
    Flit(const Flit& other);
    virtual ~Flit();
    Flit& operator=(const Flit& other);
    virtual Flit *dup() const override {return new Flit(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFlitCount() const;
    virtual void setFlitCount(int flitCount);
    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);
    virtual int getDestId() const;
    virtual void setDestId(int destId);
    virtual bool getIsHead() const;
    virtual void setIsHead(bool isHead);
    virtual bool getIsTail() const;
    virtual void setIsTail(bool isTail);
    virtual int getVcid() const;
    virtual void setVcid(int vcid);
    virtual int getPort() const;
    virtual void setPort(int port);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual double getSendTime() const;
    virtual void setSendTime(double sendTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Flit& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Flit& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLIT_M_H

